# encoding: utf-8
require 'spec_helper'
require 'yaml'
require_relative '../../lib/buildpack-cve-notifier'
require_relative '../../lib/notifiers/buildpack-cve-email-preparer'

describe BuildpackCVENotifier do
  describe '#execute!' do
    let(:output_new_buildpack_cves) { Dir.mktmpdir}
    let(:cve_history) {[{title: "CVE-2014-8080: Denial of Service XML Expansion",
                    description:"Unrestricted entity expansion",
                    raw_description: "<p>Unrestricted entity expansion</p>" },
                   {title: "CVE-2015-1855: Ruby OpenSSL Hostname Verification",
                    description: "Ruby OpenSSL error",
                    raw_description:"<p> Ruby OpenSSL error</p>"}]}
    
    let(:new_cve) { title: "CVE 2016-8080:Denial sql injection", 
    }
    let(:new_cves) {[new_cve]
    before do
      allow_any_instance_of(described_class).to receive(:notify_on_slack)
      allow_any_instance_of(described_class).to receive(:write_cves_to_yaml)
    end
    it "should send a email upon cve reciept" do
      dummy_cves = [{}, {}]
      moc_cve_history = double(:history_mock)
      allow(CVEHistory).to receive(:new).and_return(moc_cve_history)
      allow(moc_cve_history).to receive(:read_yaml_cves).and_return([])

      expect(BuildpackCVEEmailPreparer).to receive(:build_message).with()
      BuildpackCVENotifier.run('ruby', dummy_cves)
    end
  end
end
